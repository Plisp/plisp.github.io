<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>A programming blog</title> <link href=""/> <link type="application/atom+xml" rel="self" href="/atom.xml"/> <updated>Fri, 10 Sep 2021 09:04:40 +1000</updated> <author> <name>plisp</name> </author> <entry> <link type="text/html" rel="alternate" href="/posts/A-trick-for-simpler-priority-queues.html"/> <title>A trick for simpler priority queues</title> <published>2021-08-28 18:20:08</published> <updated>2021-08-28 18:20:08</updated> <author> <name>plisp</name> <uri></uri> </author> <content type="html">&lt;p&gt;I almost forgot I had this blog setup, but today I found a interesting trick which nobody
seems to have used in their heaps, so here it is.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;http://opendatastructures.org/ods-python/10_Heaps.html&quot; &gt;Heaps&lt;/a&gt; are a common structure
for implementing priority queues, being able to both extract the minimum/maximum priority
element and insert a new element in &lt;code&gt;O(log n)&lt;/code&gt;. The typical implementation is an implicit
complete binary tree embedded within an array, which is simple and has good cache locality.&lt;/p&gt;

&lt;p&gt;Normally the root of the heap is present at index 0, with the children of &lt;code&gt;i&lt;/code&gt; at &lt;code&gt;2i+1&lt;/code&gt;
and &lt;code&gt;2i+2&lt;/code&gt;, and its parent at &lt;code&gt;(i-1)/2&lt;/code&gt;. However by leaving index 0 empty and
indexing the heap from 1, you can simplify these calculations and save a few arithmetic ops.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;460&quot; height=&quot;300&quot; src=&quot;../static/heap.png&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Additionally, if you &lt;code&gt;aligned_alloc&lt;/code&gt; the heap array, you may be able to improve cache
alignment of children. For example, assuming 64-bit integer elements and cache lines, the 8
great-grandchildren of &lt;code&gt;a[i]&lt;/code&gt; at indices &lt;code&gt;a[8i]&lt;/code&gt; to &lt;code&gt;a[8i+7]&lt;/code&gt; will lie in a single cache
line as 64 divides &lt;code&gt;8i * 8 bytes&lt;/code&gt;. This allows prefetching multiple levels in advance.&lt;/p&gt;

&lt;p&gt;Further if you keep the heap capacity as a power of 2, you get a complete binary tree,
and so the depth of a large heap should be obvious to the branch predictor. Then sifting
down only needs to check the validity of the right child since either both, or neither are
valid in a complete tree, which saves several comparisions when popping from the heap
(this can of course also be done in a 0-indexed heap by leaving the final element empty).&lt;/p&gt;

&lt;p&gt;Combining these tricks yields quite a gain in simplicity and theoretically, performance
(benchmarks later?).&lt;/p&gt;

&lt;p&gt;Here&#039;s some source code in C for a integer max heap, but the idea should be clear enough.
Details can be found in my &lt;a href=&quot;https://github.com/plisp/dsdump&quot; &gt;collection of algorithms&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;struct&lt;/span&gt; heap &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
    size_t size, cap;
    &lt;span class=&quot;symbol&quot;&gt;long&lt;/span&gt; *data;
&lt;/span&gt;}&lt;/span&gt; Heap;

Heap *heap_new&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
    &lt;span class=&quot;symbol&quot;&gt;struct&lt;/span&gt; heap *new = malloc&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;sizeof&lt;/span&gt; *new&lt;/span&gt;)&lt;/span&gt;;
    new-&amp;gt;size = 1;
    new-&amp;gt;cap = 2;
    &lt;span class=&quot;symbol&quot;&gt;return&lt;/span&gt; new;
&lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// sifts the element recently pushed to the index heap-&amp;gt;size up as far as possible
&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; sift_down&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;Heap *heap&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
    &lt;span class=&quot;symbol&quot;&gt;long&lt;/span&gt; *a = heap-&amp;gt;data;
    size_t i = heap-&amp;gt;size, parent = i/2;
    &lt;span class=&quot;comment&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;symbol&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;parent &amp;gt; 0 &amp;amp;&amp;amp; a&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt; &amp;gt; a&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;parent&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren2&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        swap&lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&amp;amp;a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;parent&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;
        i = parent, parent = i/2;
    &lt;/span&gt;}&lt;/span&gt;
&lt;/span&gt;}&lt;/span&gt;

&lt;span class=&quot;symbol&quot;&gt;void&lt;/span&gt; sift_down&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;Heap *heap&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
    &lt;span class=&quot;symbol&quot;&gt;long&lt;/span&gt; *a = heap-&amp;gt;data;
    &lt;span class=&quot;symbol&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;size_t i, max_child = 1, left, right;;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren2&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        i = max_child;
        left = i*2, right = i*2 + 1;
        &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;right &amp;gt;= heap-&amp;gt;size&lt;/span&gt;)&lt;/span&gt; break;
        &lt;span class=&quot;comment&quot;&gt;// swap with larger child &amp;gt; other child
&lt;/span&gt;        max_child = a&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;left&lt;/span&gt;]&lt;/span&gt; &amp;gt; a&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;right&lt;/span&gt;]&lt;/span&gt; ? left : right;
        &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;max_child&lt;/span&gt;]&lt;/span&gt; &amp;gt; a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
            swap&lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&amp;amp;a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;max_child&lt;/span&gt;]&lt;/span&gt;, &amp;amp;a&lt;span class=&quot;paren4&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;
        &lt;span class=&quot;symbol&quot;&gt;else&lt;/span&gt; break;
    &lt;/span&gt;}&lt;/span&gt;
&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More posts to come soon.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="/posts/2020-08-15.html"/> <title>2020-08-15</title> <published>2020-08-15 10:23:51</published> <updated>2020-08-15 10:23:51</updated> <author> <name>plisp</name> <uri></uri> </author> <content type="html">&lt;p&gt;Switched from jekyll to coleslaw. Things look much nicer now.
Code highlighting is looking real sexy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defvar&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;special&quot;&gt;*my-fasldir*&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fasl/&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; my-sly-compile-file &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;interactive&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;let*&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;rootdir &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;projectile-project-root&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;fasldir &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;concat &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;projectile-project-root&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;*my-fasldir*&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;relative-dir &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;string-trim-right
                        &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;substring &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-file-name &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;current-buffer&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;length rootdir&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
                        &lt;span class=&quot;string&quot;&gt;&quot;[^/]+&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;file-fasl-dir &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;concat fasldir relative-dir&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;make-directory file-fasl-dir t&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;setq&lt;/span&gt;&lt;/i&gt; sly-compile-file-options &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;list &lt;span class=&quot;keyword&quot;&gt;:fasl-directory&lt;/span&gt; file-fasl-dir&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sly-compile-file&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;; if using use-package do
&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; :bind (:map sly-editing-mode-map (&quot;C-c C-k&quot; . #&#039;my-sly-compile-file))
&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; otherwise
&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;bind-key &lt;span class=&quot;string&quot;&gt;&quot;C-c C-k&quot;&lt;/span&gt; #&#039;my-sly-compile-file sly-editing-mode-map&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scope highlighting is not particularly useful at the moment as finding colors that don&#039;t clash with solarized is a real challenge.&lt;/p&gt;
</content> </entry> </feed>